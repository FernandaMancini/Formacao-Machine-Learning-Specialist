{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# **Matriz de Confusão e Métricas**\n",
        "\n",
        "O objetivo desse projeto é calcular as principais métricas para avaliação de modelos de classificação de dados, como acurácia, sensibilidade (recall), especificidade, precisão e F-score, utilizando os métodos e suas fórmulas correspondentes."
      ],
      "metadata": {
        "id": "cLBFZQOU7e9d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Passo 1:**\n",
        "Importar as bibliotecas"
      ],
      "metadata": {
        "id": "Y9AqsZP3_7iu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import datasets, layers, models\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import io\n",
        "from sklearn.metrics import confusion_matrix, classification_report"
      ],
      "metadata": {
        "id": "1SDsMZ6_7bfH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Passo 2:**\n",
        "Carregar e definir as classes"
      ],
      "metadata": {
        "id": "CbQjk2qCAOSD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()\n",
        "\n",
        "train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255.0\n",
        "test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255.0\n",
        "\n",
        "classes = [0,1,2,3,4,5,6,7,8,9]"
      ],
      "metadata": {
        "id": "PMEpR2dg1VfC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Passo 3:**\n",
        "Construindo o modelo"
      ],
      "metadata": {
        "id": "m3-LphKTAfZF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = models.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(10, activation='softmax')\n",
        "])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5VhmgwgT8Oug",
        "outputId": "68c90c69-1a6b-4492-ca0f-c7374b3c22f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Passo 4:**\n",
        "Realizando o treinamento"
      ],
      "metadata": {
        "id": "FjbxJK8iAlup"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(train_images, train_labels, epochs=5, validation_data=(test_images, test_labels))\n",
        "\n",
        "y_pred = np.argmax(model.predict(test_images), axis=-1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wvXwU0qu8XtM",
        "outputId": "8491fc5c-b2c7-47f0-9eda-e68ba912fa7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m57s\u001b[0m 29ms/step - accuracy: 0.8968 - loss: 0.3297 - val_accuracy: 0.9855 - val_loss: 0.0463\n",
            "Epoch 2/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m57s\u001b[0m 30ms/step - accuracy: 0.9844 - loss: 0.0495 - val_accuracy: 0.9845 - val_loss: 0.0464\n",
            "Epoch 3/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 30ms/step - accuracy: 0.9899 - loss: 0.0330 - val_accuracy: 0.9899 - val_loss: 0.0342\n",
            "Epoch 4/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m63s\u001b[0m 34ms/step - accuracy: 0.9925 - loss: 0.0234 - val_accuracy: 0.9896 - val_loss: 0.0316\n",
            "Epoch 5/5\n",
            "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 35ms/step - accuracy: 0.9939 - loss: 0.0193 - val_accuracy: 0.9919 - val_loss: 0.0296\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 8ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Gerando a Matriz de Confusão**"
      ],
      "metadata": {
        "id": "pDBqySdqAsyy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conf_matrix = confusion_matrix(test_labels, y_pred)\n",
        "plt.figure(figsize=(8, 8))\n",
        "sns.heatmap(conf_matrix, annot=True, cmap=plt.cm.Blues)\n",
        "plt.tight_layout()\n",
        "plt.ylabel('True label')\n",
        "plt.xlabel('Predicted label')\n",
        "plt.title('Normalized Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "bh2n65TQ52ln",
        "outputId": "f3efb8b3-acb9-47ab-a92a-36bacdb903f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Gerando a Função de Cálculo de Métricas**"
      ],
      "metadata": {
        "id": "n7yujo0uA0eo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_metrics(conf_matrix):\n",
        "    FP = conf_matrix.sum(axis=0) - np.diag(conf_matrix)\n",
        "    FN = conf_matrix.sum(axis=1) - np.diag(conf_matrix)\n",
        "    TP = np.diag(conf_matrix)\n",
        "    TN = conf_matrix.sum() - (FP + FN + TP)\n",
        "\n",
        "    precision = TP / (TP + FP)\n",
        "    recall = TP / (TP + FN)\n",
        "    specificity = TN / (TN + FP)\n",
        "    accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
        "    f1_score = 2 * (precision * recall) / (precision + recall)\n",
        "\n",
        "    metrics = {\n",
        "        'Precision': precision,\n",
        "        'Recall': recall,\n",
        "        'Specificity': specificity,\n",
        "        'Accuracy': accuracy,\n",
        "        'F1-score': f1_score\n",
        "    }\n",
        "\n",
        "    return metrics"
      ],
      "metadata": {
        "id": "hG_nNXId3R0f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics = calculate_metrics(conf_matrix)\n",
        "\n",
        "for i, class_name in enumerate(classes):\n",
        "    print(f\"\\nMétricas da classe {class_name}:\")\n",
        "    print(f\"Precisão: {metrics['Precision'][i]:.2f}\")\n",
        "    print(f\"Sensibilidade: {metrics['Recall'][i]:.2f}\")\n",
        "    print(f\"Especificidade: {metrics['Specificity'][i]:.2f}\")\n",
        "    print(f\"Acurácia: {metrics['Accuracy'][i]:.2f}\")\n",
        "    print(f\"F1-Score: {metrics['F1-score'][i]:.2f}\")\n",
        "\n",
        "avg_precision = np.mean(metrics['Precision'])\n",
        "avg_recall = np.mean(metrics['Recall'])\n",
        "avg_specificity = np.mean(metrics['Specificity'])\n",
        "avg_accuracy = np.mean(metrics['Accuracy'])\n",
        "avg_f1_score = np.mean(metrics['F1-score'])\n",
        "\n",
        "print(\"\\nMédia das Metricas de todas as classes:\")\n",
        "print(f\"Precisão Média: {avg_precision:.2f}\")\n",
        "print(f\"Sensibilidade Média: {avg_recall:.2f}\")\n",
        "print(f\"Especificidade Média: {avg_specificity:.2f}\")\n",
        "print(f\"Acurácia Média: {avg_accuracy:.2f}\")\n",
        "print(f\"F1-Score Médio: {avg_f1_score:.2f}\")\n",
        "\n",
        "print(\"\\nReporte de Classificação:\")\n",
        "print(classification_report(test_labels, y_pred,target_names=[str(c) for c in classes]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "19xRnz70-ArQ",
        "outputId": "2a488613-d85c-4595-b90c-6d6bcd010337"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Métricas da classe 0:\n",
            "Precisão: 1.00\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 1:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 1.00\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 1.00\n",
            "\n",
            "Métricas da classe 2:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 3:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 4:\n",
            "Precisão: 0.98\n",
            "Sensibilidade: 1.00\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 5:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 6:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 7:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 8:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.99\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Métricas da classe 9:\n",
            "Precisão: 0.99\n",
            "Sensibilidade: 0.98\n",
            "Especificidade: 1.00\n",
            "Acurácia: 1.00\n",
            "F1-Score: 0.99\n",
            "\n",
            "Média das Metricas de todas as classes:\n",
            "Precisão Média: 0.99\n",
            "Sensibilidade Média: 0.99\n",
            "Especificidade Média: 1.00\n",
            "Acurácia Média: 1.00\n",
            "F1-Score Médio: 0.99\n",
            "\n",
            "Reporte de Classificação:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.99      0.99       980\n",
            "           1       0.99      1.00      1.00      1135\n",
            "           2       0.99      0.99      0.99      1032\n",
            "           3       0.99      0.99      0.99      1010\n",
            "           4       0.98      1.00      0.99       982\n",
            "           5       0.99      0.99      0.99       892\n",
            "           6       0.99      0.99      0.99       958\n",
            "           7       0.99      0.99      0.99      1028\n",
            "           8       0.99      0.99      0.99       974\n",
            "           9       0.99      0.98      0.99      1009\n",
            "\n",
            "    accuracy                           0.99     10000\n",
            "   macro avg       0.99      0.99      0.99     10000\n",
            "weighted avg       0.99      0.99      0.99     10000\n",
            "\n"
          ]
        }
      ]
    }
  ]
}